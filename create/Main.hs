{-# LANGUAGE UnicodeSyntax #-}
{-# LANGUAGE BangPatterns  #-}

module Main where

import qualified Data.Map             as M
import           Data.Number.LogFloat
import           Parse
import           Prelude              hiding (putStr, words, lines)
import           System.Directory
import           Text.XML.HXT.Core

type ‚Ñ§ = Int      -- The integer type `Int` will be denoted by ‚Ñ§.
type ‚Ñö = Double   -- The double type will be denoted by ‚Ñö.
type ùìõ = LogFloat -- Log-domain numbers to prevent underflow.

Œµ ‚à∑ Double
Œµ = encodeFloat 1 $ fst  r - ds
  where r  = floatRange (0.1 :: Double)
        ds = floatDigits (0.1 :: Double)

freqMap ‚à∑ Ord a ‚áí [a] ‚Üí M.Map a ‚Ñ§
freqMap unigrams = populate M.empty unigrams
  where populate ‚à∑ Ord a ‚áí M.Map a ‚Ñ§ ‚Üí [a] ‚Üí M.Map a ‚Ñ§
        populate m [] = m
        populate m (x:xs) = let freq = (M.findWithDefault 0 x m) ‚à∑ ‚Ñ§
                            in populate (M.insert x (freq + 1) m) xs

--  | Takes in a tuple (x, y) (i.e., a bigram), and takes in two frequency maps
--    c‚ÇÅ and c‚ÇÇ, c‚ÇÅ for counting all the occurrences of x and the other for
--    counting the number of bigrams.

main ‚à∑ IO ()
main = do
  files ‚Üê getDirectoryContents "tb_uni"
  let fileNames = drop 2 . take 1500 $ map ("tb_uni/" ++) files
  pairList ‚Üê mapM runX $ map getWords fileNames
  let taggedWordsList  = map parseTupleList pairList
      taggedWords ‚à∑ [(String, POS)]
      taggedWords      = concat taggedWordsList
      (ws, ts)         = unzip taggedWords
      -- For computing the probability of word-tag pair.
      taggedWordFreqs  = freqMap taggedWords
      wordFreqs        = freqMap ws
      tagFreqs         = freqMap ts
      -- For computing the probability of tag bigram
      tagBigrams       = [(ts !! i, ts !! (i+1)) | i ‚Üê [0 .. (length ts)-2]]
      tagBigramFreqs   = freqMap tagBigrams
      -- We will use these to create our HMM.
      initStatesFreqs  = freqMap  $ map (head . map snd) taggedWordsList
  createDirectoryIfMissing False "model"
  writeFile "model/tagFreqs.hs"        (show tagFreqs)
  writeFile "model/wordFreqs.hs"       (show wordFreqs)
  writeFile "model/tagBigramFreqs.hs"  (show tagBigramFreqs)
  writeFile "model/taggedWordFreqs.hs" (show taggedWordFreqs)
  writeFile "model/initStatesFreqs.hs" (show initStatesFreqs)
  writeFile "model/words.hs" (show ws)
  putStrLn "Successfully saved model in model."
