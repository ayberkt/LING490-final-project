{-# LANGUAGE BangPatterns       #-}
{-# LANGUAGE UnicodeSyntax      #-}
{-# LANGUAGE StandaloneDeriving #-}
{-# LANGUAGE FlexibleInstances  #-}

module Main where

import Prelude
import Data.HMM (loadHMM, viterbi, HMM(..))
import System.IO
import Data.Array
import Parse (POS(..))
import Data.Map.Strict (findWithDefault, Map(..))
import Data.List (intercalate)
import Data.Number.LogFloat

type ‚Ñ§ = Int
type ‚Ñö = Double
type ùìõ = LogFloat -- Log-domain numbers to prevent underflow.

probability ‚à∑ (Ord a, Ord b) ‚áí (a, b) ‚Üí Map a ‚Ñ§ ‚Üí Map (a, b) ‚Ñ§ ‚Üí ùìõ
probability (x, y) c‚ÇÅ c‚ÇÇ = if xCount == 0 || yCount == 0
                           then logFloat Œµ
                           else (logFloat yCount) / (logFloat xCount)
  where yCount = fromIntegral (findWithDefault 0 (x, y) c‚ÇÇ) ‚à∑ ‚Ñö
        xCount = fromIntegral (findWithDefault 0 x c‚ÇÅ) ‚à∑ ‚Ñö

Œµ ‚à∑ Double
Œµ = encodeFloat 1 $ fst  r - ds
  where r  = floatRange (0.1 :: Double)
        ds = floatDigits (0.1 :: Double)


sample‚ÇÅ ‚à∑ Array Int String
sample‚ÇÅ = listArray (0, 4) [ "g√∂zleri"
                           , "kor"
                           , "gibi"
                           , "yanƒ±yordu"
                           , "."]

sample‚ÇÇ ‚à∑ Array Int String
sample‚ÇÇ = listArray (0, 3) [ "adam"
                           , "yine"
                           , "geldi"
                           , "."
                           ]

sample‚ÇÉ ‚à∑ Array Int String
sample‚ÇÉ = listArray (0, 4) [ "g√ºzel"
                           , "kƒ±z"
                           , "mutlu"
                           , "g√∂z√ºk√ºyordu"
                           , "."]

sample‚ÇÑ ‚à∑ Array Int String
sample‚ÇÑ   = listArray (0, 5) [ "renksiz"
                             , "ye≈üil"
                             , "fikirler"
                             , "sessizce"
                             , "uyuyor"
                             , "."
                             ]

sample‚ÇÖ ‚à∑ Array Int String
sample‚ÇÖ   = listArray (0, 3) [ "dostlar"
                             , "beni"
                             , "hatƒ±rlasƒ±n"
                             , "."
                             ]

sample‚ÇÜ ‚à∑ Array Int String
sample‚ÇÜ = listArray (0, 25) [ "Cebren"
                            , "ve"
                            , "hile"
                            , "ile"
                            , "aziz"
                            , "vatanƒ±n"
                            , ","
                            , "b√ºt√ºn"
                            , "kaleleri"
                            , "zaptedilmi≈ü"
                            , "b√ºt√ºn"
                            , "tersanelerine"
                            , "girilmi≈ü"
                            , ","
                            , "b√ºt√ºn"
                            ,"ordularƒ±"
                            ,"daƒüƒ±tƒ±lmƒ±≈ü"
                            , "ve"
                            , "memleketin"
                            ,"her"
                            ,"k√∂≈üesi"
                            ,"bilfiil"
                            ,"i≈ügal"
                            ,"edilmi≈ü"
                            ,"olabilir"
                            ,"."
                            ]

sample‚Çá ‚à∑ Array Int String
sample‚Çá = listArray (0, 4) [ "Adam"
                           , "sƒ±rƒ±ta"
                           , "sƒ±rƒ±ta"
                           , "y√ºr√ºyordu"
                           , "."]

pretty ‚à∑ Array Int String ‚Üí [POS] ‚Üí IO ()
pretty ws ps = let lines = (\n ‚Üí replicate n '-') <$> (length <$> ws)
                   align ‚à∑ String ‚Üí String ‚Üí String
                   align w t = let
                     n      = max 0 (length w - (length t)) `div` 2
                     spaces = replicate n ' '
                     in spaces ++ t ++ spaces
                   wsList   = foldr (:) [] ws
                   pStrings = map show ps
               in do putStrLn $ intercalate " " wsList
                     putStrLn $ foldr (++) " "   $ (++ " ") <$> lines
                     putStrLn $ intercalate "  " $
                       zipWith align wsList pStrings

main :: IO ()
main = do
  tagFreqsStr        ‚Üê readFile "model/tagFreqs.hs"
  wordFreqsStr       ‚Üê readFile "model/wordFreqs.hs"
  tagBigramFreqsStr  ‚Üê readFile "model/tagBigramFreqs.hs"
  taggedWordFreqsStr ‚Üê readFile "model/taggedWordFreqs.hs"
  initStatesFreqsStr ‚Üê readFile "model/initStatesFreqs.hs"
  wsStr              ‚Üê readFile "model/words.hs"
  let tagFreqs        = (read tagFreqsStr) ‚à∑ Map POS Int
      wordFreqs       = (read wordFreqsStr) ‚à∑ Map String Int
      tagBigramFreqs  = (read tagBigramFreqsStr) ‚à∑ Map (POS, POS) Int
      taggedWordFreqs = (read taggedWordFreqsStr) ‚à∑ Map (String, POS) Int
      initStatesFreqs = (read initStatesFreqsStr) ‚à∑ Map POS Int
      ws              = (read wsStr) ‚à∑ [String]
      initProbFn s    = let count  = findWithDefault 0 s initStatesFreqs
                            count' = fromIntegral count
                            n      = fromIntegral $ length taggedWordFreqs
                        in logFloat $ count' / n
      transFn s‚ÇÅ s‚ÇÇ    = probability (s‚ÇÅ, s‚ÇÇ) tagFreqs tagBigramFreqs
      outFn s e       = probability (e, s) wordFreqs taggedWordFreqs
      possibleTags    = [Noun .. Unknown]
      !newHMM         = HMM { states      = possibleTags ‚à∑ [POS]
                            , events      = ws ‚à∑ [String]
                            , initProbs   = initProbFn
                            , transMatrix = transFn
                            , outMatrix   = outFn
                            }
    in pretty sample‚ÇÅ $ viterbi newHMM sample‚ÇÅ
